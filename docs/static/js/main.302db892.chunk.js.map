{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","_ref","setCategories","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","onSubmit","e","preventDefault","trim","length","cats","concat","toConsumableArray","type","placeholder","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","asyncToGenerator","regenerator_default","mark","_callee","category","res","_yield$res$json","data","gif","wrap","_context","prev","next","encodeURI","fetch","sent","json","map","_ref2","images","downsized_medium","abrupt","stop","_x","apply","this","arguments","GifGrid","_useFetchGifs","loading","state","setState","useEffect","then","imgs","useFetchGifs","Fragment","img","components_GifGridItem","assign","key","GifExpertApp","categories","components_AddCategory","onClick","components_GifGrid","ReactDOM","render","components_GifExpertApp","document","getElementById"],"mappings":"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","file":"static/js/main.302db892.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Ingrese un dato...\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=aCL1Z3KkL2mtx6gecOmkLXL0hode5B1T`;\r\n    const res = await fetch(url)\r\n    const { data } = await res.json();\r\n\r\n    const gif = data.map(({id, title, images}) => {\r\n        return {\r\n            id: id,\r\n            title: title,\r\n            url: images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gif;\r\n}","import React from 'react'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='card animate__animated animate__fadeIn'>{category}</h3>\r\n\r\n            {loading && <p className='card animate__animated animate__flash'>Loading...</p> }\r\n\r\n            <div className=\"card-grid\" >\r\n\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => setState({\r\n                data: imgs,\r\n                loading: false\r\n            }))\r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n    // const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\r\n\r\n    const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n    const handleAdd = () => {\r\n        setCategories(cats => [...cats]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <button onClick={handleAdd}>Agregar</button>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp'\nimport './index.css';\n\n\nReactDOM.render( <GifExpertApp / > , document.getElementById('root'));"],"sourceRoot":""}